
# Old Makefile.am targets. jhrg 11/18/19

# docs

# docs-clean-ext delete all the OLD
# backup copy of the external folder
#
# select all the external backup files
# skip removing last (in time) backup
# delete too old backups (others)
# delete html folder and backup since it can be generated

.PHONY: docs-clean-ext
docs-clean-ext: clean
	srcdir=$(srcdir);
	(cd docs; \
	backup=`ls --sort=time external.*.tar.gz 2>/dev/null`; \
	rm_backup=$${backup#*.tar.gz}; \
	backup=$${backup%%.tar.gz*}; \
	if [[ -n "$$rm_backup" ]]; then \
		rm $$rm_backup; \
	fi; if [[ -n "$$backup" ]]; then \
		mv -f $$backup.tar.gz external.tar.gz; \
	elif [[ ! -f "external.tar.gz" ]]; then \
		echo "NO EXTERNAL DOCUMENTATION FOUND!"; \
	fi; )

# docs-clean-int delete the html folder
# and html folder backups.

.PHONY: docs-clean-int
docs-clean-int: clean
	srcdir=$(srcdir);
	(cd docs; \
	if [[ -d html ]]; then \
		rm -rdf html; \
	fi; \
	if [[ -f html.tar.gz ]]; then \
		rm html.tar.gz; \
	fi;)

# This compress documentation and delete folders
# this also call docs-clean leaving only the last
# and the actual copy of the external documentation
# backup
#
.PHONY: docs-pkg
docs-pkg:
	srcdir=$(srcdir);
	doxygen $(srcdir)/doxy.conf;
	( cd docs; \
	if [[ -d html ]];then \
		tar -czf html.tar.gz html; \
		rm -rdf html; \
	fi;)
	( cd docs; \
	if [[ -d external ]];then \
		tar -czf "external.`date +"%y%m%d%H%M"`.tar.gz" external 2>/dev/null; \
		rm -rdf external; \
	fi; )
	make docs-clean-ext;

# Extract external documentation and generate doxygen
# internal documentation

.PHONY: docs-old
docs-old:
	srcdir=$(srcdir) doxygen $(srcdir)/doxy.conf;
	(cd docs; \
	last=`ls --sort=time external*.tar.gz 2>/dev/null`; \
	last=$${last%%.tar.gz*}; \
	if [[ -n "$$last" ]];then \
		tar -xvzf $$last.tar.gz 2>/dev/null; \
	fi;)

###########################################################################
#
# Build linux RPMs

srpm: dist
	rpmbuild -ts sql_module-@PACKAGE_VERSION@.tar.gz

rpm: dist
	rpmbuild -tb sql_module-@PACKAGE_VERSION@.tar.gz

# Build OS/X Packages.

PACKAGEMAKER=/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/PackageMaker*

UNIV_ARCH=-arch ppc -arch i386
MAC_SYSROOT=Developer/SDKs/MacOSX10.4u.sdk

PKG_CONF_FLAGS=

clean-pkg:
	-rm -rf mac_osx @PACKAGE@-@PACKAGE_VERSION@.pkg @PACKAGE@-@PACKAGE_VERSION@

pkg-build:
	./configure --prefix=/usr --disable-dependency-tracking $(PKG_CONF_FLAGS)
	make clean all
	DESTDIR=${PWD}/mac_osx make install

pkg-main:
	./OSX_Resources/update_mac_package_contents.pl README "configure.ac" "mac_osx/usr"
	${PACKAGEMAKER} -build -p @PACKAGE@-@PACKAGE_VERSION@.pkg \
		-f mac_osx/usr \
		-ds -r OSX_Resources \
		-i OSX_Resources/Info.plist \
		-d OSX_Resources/Description.plist
	-rm -rf mac_osx

pkg-dmg:
	-rm -rf @PACKAGE@-@PACKAGE_VERSION@
	-rm -rf @PACKAGE@-@PACKAGE_VERSION@.dmg
	mkdir @PACKAGE@-@PACKAGE_VERSION@
	mv @PACKAGE@-@PACKAGE_VERSION@.pkg @PACKAGE@-@PACKAGE_VERSION@
	cp README NEWS @PACKAGE@-@PACKAGE_VERSION@
	dropdmg -i --sanitize-for-servers --format zlib @PACKAGE@-@PACKAGE_VERSION@
	-rm -rf @PACKAGE@-@PACKAGE_VERSION@

pkg: clean-pkg pkg-build pkg-main pkg-dmg
