#---------------OPeNDAP BES DAP Module Configuration file---------------#
#                                                                       #
#       National Center for Atmospheric Research (NCAR)                 #
#       High Altitude Observatory (HAO)                                 #
#       Key entries for OPeNDAP BES DAP Module                          #
#                                                                       #
#-----------------------------------------------------------------------#

BES.Include=dap.conf

#-----------------------------------------------------------------------#
# modules to load, includes data modules and command modules            #
#-----------------------------------------------------------------------#

BES.modules+=sql,odbc
BES.module.sql=@bes_modules_dir@/libsql_module.so
BES.module.odbc=@bes_modules_dir@/libodbc_module.so

#-----------------------------------------------------------------------#
# Setting the data information
#-----------------------------------------------------------------------#

# The TypeMatch parameter is a list of handler/module names and a regular
# expression separated by a colon. If the regular expression matches an item,
# then the BES uses the associated handler/module. Each <handler>:<regular
# expression> pair is followed by a semicolon. This is used when creating
# containers in the BES (the 'set container' command). The example regular
# expression says to use the 'h4' handler for any file with an extension of
# 'hdf', 'HDF' or 'eos' which may also end in '.gz' or '.bz2'. In the latter
# case the file will be treated as a compressed file.

BES.Catalog.catalog.TypeMatch+=sql:.*\.(SQL|sql)$;

# To test your TypeMatch regular expression you can use besregtest as
# follows:

# % besregtest type # "nc:.*\.nc$;nc:.*\.nc\.gz$;" fnoc1.nc
# expression ".*\.(nc|NC)(\.gz|\.bz2|\.Z)?$" matches exactly, type = nc

#-----------------------------------------------------------------------#
# SQL handler specific parameters
#-----------------------------------------------------------------------#

# ----------------------------------------------------------------------#
# 		CheckPoint:
# ----------------------------------------------------------------------#
# There are 6 check points that you can activate:
# _SQLH_ON_CONNECT	=	1
# _SQLH_ON_CLOSE	=	2
# _SQLH_ON_QUERY	=	3
# _SQLH_ON_GET_NEXT	=	4
# _SQLH_ON_NEXT_ROW	=	5
# _SQLH_ON_CUSTOM	=	6
# Each check point correspond to a SQL phase in which handlers can perform
# Actions.
# Commons actions are (used by unixODBC):
#  - print out debug info
#  - throw a Fatal error if connection status is bad
#  - throw a (recoverable) InternalError on get next object
# Others actions could be:
#  - mail me on error
#  - dump on file
#  - whatever you want
# Each registered SQLPlugin module can register and use its list
# of actions which will be activated or not depending on this option:
# SQL.CheckPoint=1,2,3,4

SQL.CheckPoint=1,2,3,4,5
